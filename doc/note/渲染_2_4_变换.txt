矩阵
    乘法
        矩阵A左乘矩阵B = AB
        矩阵A右乘矩阵B = BA
        A*B必须满足A矩阵列数==B矩阵行数,因为矩阵乘法运算为 运算结果第M行第N列=A矩阵第M行每个元素*B矩阵第N列每个元素对应相乘然后相加
        mul(A,B) 如果A是向量,那么认为A是行向量  如果B是向量,那么认为B是列向量
    变换
        矩阵左乘原矩阵是对原矩阵进行行变换,即对列向量执行行变换(修改列向量每一行的数据)
        原矩阵右乘矩阵是对原矩阵进行列变换,即对行向量执行列变换(修改行向量每一列的数据)
    单位矩阵 
        n阶方阵对角线全1,其他元素全0
    逆矩阵
        AB相乘结果为单位矩阵,则AB互为逆矩阵
        Matrix4x4.inverse表示逆矩阵
        localToWorld和worldToLocal互为逆矩阵
    转置矩阵
        A矩阵行列互换,主要用于在计算矩阵乘法时切换左乘右乘
    变换顺序
        缩放-旋转-平移
        localToWorld = T矩阵*R矩阵*S矩阵*列向量
        worldToLocal = S逆矩阵*R逆矩阵*T逆矩阵*localToWorld
        从左往右计算,对右矩阵执行行变换
    向量叉乘
        AxB = (AyBz-AzBy,AzBx-AxBz,AxBy-AyBx)
    齐次坐标
        N+1维向量表示N维向量,齐次坐标为(x,y,z,w) 
        w值不唯一 w=1为规格化坐标,此时(x,y,z)是普通坐标系下的坐标  w=0表示无穷远的点
        主要用于统一矩阵运算,便于变换的合成,便于硬件实现
坐标系
    模型坐标系
        局部坐标系,是指模型本身的坐标系,以物体中心为原点,有自己的xyz轴
        默认放入世界坐标系的模型,局部坐标系和世界坐标系是重合的
        经过M矩阵变换转换到世界坐标系
    世界坐标系
        左手坐标系 x右y上z里
        右手坐标系 x右y上z内
        经过V矩阵变换转换到视图坐标系
    视图坐标系
        摄像机局部坐标系
        经过P矩阵转换到裁剪坐标系
    裁剪坐标系
        透视除法之前的坐标系,此时还保留有深度信息
        经过透视除法转换到NDC坐标系
    设备坐标系
        范围从-1到1,经过视口变换转换为屏幕坐标系
        (-1,-1)->(screen.width * viewport.x,screen.height * viewport.y)
        (1,1)->(screen.width * viewport.x + screen.width * viewport.z,screen.height * viewport.y + screen.height * viewport.w)
    屏幕坐标系 
        unity中左下角为(0,0) 右上角为显示屏幕的(w,h)
        ngui中中心点为(0,0)
        gui左上角为(0,0)
        glut窗口左上角为(0,0)
    窗口坐标系
        屏幕坐标系下的一个子窗口,可以缩放移动关闭,与glut中的window概念一致 
        xy标记起始点,wh标记宽高 xywh均是整数,以屏幕分辨率为基准
    视口坐标系
        视口是窗口的一个区域,是真正的显示当前摄像机渲染结果的区域
        xy标记起始点,wh标记宽高 xywh均是0-1的数值,是窗口大小的比例
变换
    窗口->视口变换


变换 变换计算从左往右,变换顺序从右往左看
	矩阵相乘  AmnBxy必须满足n==x,列向量表示法为左乘,行向量右乘
	三角变换  cos(a+b) = cosa*cosb - sina * sinb     cos(a-b) = cosa * cosb + sina * sinb
	平移变换  P' = T*P 
			  平移矩阵 |1 0 0 tx|   逆矩阵 直接把txtytz变成负的即可
			  		   |0 1 0 ty|
			  		   |0 0 1 tz|
			  		   |0 0 0 1|
	旋转变换  P' = R*P
			  旋转矩阵,二维旋转一般是绕基准点旋转,可以先平移至基准点,绕原点旋转,在平移回原位置
			  		       |cosA -sinA 0|
			  		   T * |sinA  cosA 0| * T^ = 
			  		   	   | 0      0  1|
			  		   三维旋转需要先将旋转轴平移旋转使其与坐标轴Z重合,然后绕Z轴旋转

			  		   旋转轴定义: 与Z轴夹角A,与X轴夹角B,可定义一个旋转轴 或者方向向量
			  		   			   旋转时先旋转使得Z轴与旋转轴重合
			  		   			   先绕Z轴旋转B角度,在绕Y轴旋转A角度,在绕Z轴旋转C角度,在绕Y轴逆转A角度,在绕Z转逆转B角度
			  欧拉角  xyz分别代表绕局部XYZ轴的旋转,这个旋转角度值和旋转顺序有关系、
			  		  unity中旋转顺序是zxy
			  		  连续差值不平滑
			  		  同一个旋转有不同的表达方式,万向节锁
			  		  转换为旋转矩阵需要太多的sin cos计算,没有四元数简单
			  		  R = RzRxRy
			  四元数  差值平滑,没有万向节锁
			  		  表示方式  rotation = (x,y,z,w) x = VxSin(0/2) y = VySin(0/2) z = VzSin(0/2) w = Cos(0/2)
			  		  四元数转换为旋转矩阵
			  		  		 1-2y^2-2z^2    2(xy-zw)    2(xz+yw)     0
			  		  		 2(xy+zw)      1−2x^2−2z^2  2(yz-xw)     0
			  		  		 2(xz−yw)       2(yz+xw)    1−2x^2−2y^2  0
			  		  		    0               0          0         1
			  		  旋转矩阵转换为四元数
			  		  		x = (m32-m23)/4w  y = (m13-m31)/4w z = (m21-m12)/4w w = (根号 1 + m11 + m22 + m33)/2
			  		  欧拉角转换为四元数
	缩放变换  P' = S*P
	堆栈      进入流水线的顶点都要乘上矩阵堆栈的当前堆栈,进行变换
			  GL_PROJECTION表示要设置投影矩阵,可以使用glOrtho(左右下上近远)或者glPerspective(角度,宽高比,近平面,远平面)
			  GL_MODEVIEW表示要设置模型视图矩阵,可以使用glLookAt() glTranslate等对已有的顶点进行变换
	M矩阵     T(局部偏移) * R(局部旋转) * S(局部缩放)
			  得出以父结点为世界坐标系的世界坐标,然后递归查找父结点,进行坐标变换,没有父结点那就是最终世界坐标
	V矩阵     经过M矩阵变换,物体与摄像机均处于世界坐标系下,现在要把物体转换到摄像机坐标系下
			  V = 摄像机矩阵的逆变换  即 T R S逆矩阵
    P矩阵     投影矩阵分为透视投影和正交投影
    		  透视投影 fov aspect near far
    		  		   投影变换把坐标变换到了裁剪坐标系(范围是-z到z,-z到-z,-z到z之间)
    		  		   		假设Xn = Xp * (2 / r - l) + B; Xp为r时Xn为1,最终解得Xn=[(2n/(r-l)*Xe + (r+l)/(r-l)*Ze]/Ze
    		  		   		同理Yn= [(2n/(t-b)*Ye + (t+b)/(t-b)*Ze]/Ze
    		  		   		Zn = (AZe + B)/Ze; Ze范围是n到f,因此Zn=[(f+n)/(f-n)*Ze - 2fn/(f-n)]/Ze
    		  		   		Wn为1
    		  		   		此时Xn是-1到1之间,Yn也是-1到1之间,Zn是-1到1之间,Wn是1
    		  		   		齐次坐标要保留Z信息,变为(Xn*Ze,Yn*Ze,Zn*Ze,Ze) 
    		  		   		为了方便计算可以令r-l或者t-b始终为1,减少除法计算,根据宽高比计算出高度或者宽度
    		  		   透视除法把坐标变换到了设备坐标系(范围是-1到1,-1到-1,-1到1之间)
    		  		   		投影变换得到的裁剪齐次坐标除以Ze得出NDC坐标
    		  		   视口变换把坐标变换到了屏幕坐标系
    		  		   		这个时候需要根据-1到1映射到屏幕的0到w 0到h上
    		  		   最终需要计算出NDC坐标,(Xn,Yn,Zn) = (Xp/Zcamera,Yp/Zcamera,Zp/Zcamera)
    		  正交投影 left right bottom top near far