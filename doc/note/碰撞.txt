碰撞检测算法
              精细的碰撞检测需要对物体建模,构建一个凸包围体,然后执行凸包围体之间的相交测试
              最精细的检测是最所有的面检查碰撞
              可以利用凸体的一些算法简化计算量
              利用AABB、八叉树、四叉树简化计算范围
凸包围体
              2D,andrew算法创建模型的凸包围体
              3D,quickhull算法创建模型的凸包围体
闵可夫斯基和
              两个点集A和B,C是minkosiki和,那么C=A+B,A中所有顶点加上B中所有顶点构成的集合
              顶点集A和B发生碰撞,那么C包含原点
              A和B的最短距离等价于C和原点的最短距离
粗略测试阶段
              根据场景大小构建一个大的AABB,循环添加场景对象,
              从根节点开始查找能够完全包含当前AABB对象的盒子,如果当前结点能够包含,继续扩展八等分子节点,遍历子节点执行包含检测
              当动态物体运动时,先修改结点标记,然后重新执行一次插入操作
              八叉树和四叉树都可以用于快速查找目标对象(例如快速查找子弹碰到了谁)
              BV树,二叉树,沿着XYZ轴较长的那部分去分割,处理长条形物体
精确测试阶段
            粒子,相交测试,粒子可以简化为一个点,判断点在多边形内还是外部即可
            包围盒AABB OBB,相交测试,已知AABB最大和最小顶点,优化:优先比较xz平面 
                    a.minx > b.maxx || a.maxx < b.minx 
                    a.miny > b.maxy || a.maxy < b.miny 
                    a.minz > b.maxz || a.maxz < b.minz
            包围球,相交测试,已知半径和中心点
                    (a-b)^2 > (ar + br)^2           
            点到平面距离
                  根据两点求出法向量,根据法向量和点求出距离

            点到线段的距离 圆和线段 圆和扇形
                  先通过计算AB*AP求出夹角是锐角还是钝角,然后判断APcos∠PAB大小,也就是P点在线段AB上的投影点clamp到0,1
                  然后根据向量加法PA + t*AB = P'P得出垂线段向量,t是0那么就是A点,t是1就是B点
                  t = AP * AB / ab * ab
                  t < 0,最近点是A,距离为PA
                  t > 1,最近点为B,距离为PB
                  d = len(PA + t*AB)

            点到矩形的距离 可用于判断圆和矩形是否相交
                  计算V向量(矩形中心指向圆心P,并且x、y都取绝对值) U向量(V-H(矩形中心指向右上角顶点))(x、y取第一象限的值),计算U向量和圆半径大小
                  vector2 v = abs(p-c);
                  vector2 u = max(v-h,vector2.zero);
                  return u * u <= r * r;

            点和三角形的关系
                  求出质心坐标(u,v),三角形内的点满足(u >= 0) && (v >= 0) && (u + v < 1)  
                  AP = u * AB + v * AC
                  AP * AB = u * AB * AB + v * AC * AB
                  AP * AC = u * AB * AC + v * AC * AC
                  令 d00 = AB * AB; d11 = AC * AC; d20 = AP * AB; d21 = AP * AC; d01 = d10 = AB * AC;
                  简化之后
                  d20 = u * d00 + v * d01
                  d21 = u * d01 + v * d11
                  联立解得
                  denom = d01 * d01 - d11 * d00
                  u = (d11 * d02 - d01 * d12) / denom;
                  v = (d01 * d02 - d00 * d12) / denom
                  return (u >= 0) && (v >= 0) && (u + v < 1) 

            点和凸多边形的关系
                  pnpoly算法,从该点沿坐标轴X向右或者向左发射射线,检测射线与凸多边形的交点个数,奇数个则相交
                  点P(x,y,z) I是左点 J是右点 交点是Q
                  点P必须在I和J之间,即 (Pz < Iz != Pz < Jz)
                  求解两直线交点 (Qx - Jx) / (Pz - Jz) = (Ix - Jx) / (Iz - Jz)
                  得出交点X坐标为 Qx = (Ix - Jx) / (Iz - Jz) * (Pz - Jz) + Jx
                  判断是否相交 Qx <= Px  (只能向左或者向右发射射线,只判断同一方向)

            线段和线段的关系
                  AB、CD,首先判断CD是否在AB两侧并且AB在CD两侧,并且共面
                  normalize(cross(AB,AC)) == normalize(cross(AD,AB)) 
                  normalize(cross(CD,CA)) == normalize(cross(CB,CD)) 

            凸多边形和凸多边形的关系
                  分离轴算法,遍历所有的边,取边的垂线作为分离轴,计算两个凸多边形在轴上的投影范围
                  投影有一个不相交则两个多边形是分离的
                  已知两点A、B,分离轴经过原点,Pz / Px * (Bz - Az) / (Bx - Ax) = -1
                  解出Px = Bz - Az; Pz = Ax - Bx
                  那么分离轴为向量 n = (Bz - Az),0,-(Bx - Ax)
                  计算投影范围,也就是计算原点指向边的顶点的向量在n上的投影
                  计算出最大最小的点乘结果,比较
                  分离轴算法是用一个平面分离2个凸体
            
            线段和凸多边形、圆和圆、圆和扇形、圆和矩形、圆和胶囊均可以通过上述测试组合得出