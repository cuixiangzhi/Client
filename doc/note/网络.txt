Tomcat  静态+动态HTTP服务,动态是通过运行JAVA应用实现
Apache	静态HTTP服务
Nginx   负载均衡,反向代理 http tcp
NodeJs  基于V8的JS框架,基于NODEJS的服务器框架pomelo
cdn     内容分发网络,分区域部署服务器,选取距离最近的服务器获取内容
HTTP    url?arg1=&arg2=
TCP/IP协议栈
		应用层,自定义消息,序列化为字节数据,发给传输层,这一层是用户控制的,跟具体应用关系密切
		传输层,TCP UDP
		       把下层消息传递到上层进程
			   把上层进程的消息加入端口号后传给网络层
			   传递之前会有分组和合并的操作,确保消息完整
			   TCP流量控制  
			       TCP有一个接收缓冲区和发送缓冲区,三次握手时会通知其大小
				   TCP不能发送超出该缓冲的数据,缓冲区满了以后会返回给发送方一个WINDOW大小,代表可以接收的数据大小
				   TCP发送数据时,一次能够发送的数据有限
			   TCP超时重传 
			   	   socket发送数据后,收到接收方反馈确认数据被接收,否则超过一定时间重新发送,被接收之前数据会一直存放在缓冲区内
			       心跳包,定时发送心跳数据包,用来确定连接是否断开				   
		网络层,IP ARP&RARP
			   IP地址分为ABCDE五类,A类0-127 0三字节主机号 B类128-191 10两字节主机号 C类192-223 110一字节主机号 .0是网络地址 255是广播地址
			   IP地址由网络号+主机号构成
			   子网,子网掩码用于计算两个IP地址是否属于同一个网络,
			   IP地址与子网掩码做and运算,得出网络号		   
			   首先计算 源IP与目的IP的网络号,相同则发送ARP请求包给子网内所有主机,目的IP主机收到后反馈RAP附带MAC地址,
			   IP封包完成发送数据到子网内所有主机,MAC一致的主机接收IP包
			   不相同则发送ARP请求给网关,网关反馈MAC,收到后封包发给网关,网关收到后发给路由器,
			   路由器经过路由选择算法一跳一跳的到达目标网络主机
			   提供服务的主机必须拥有公网IP才可以被访问			 
			   内网机器需要设置路由端口映射,把对外网IP某个端口映射到本地主机的进程	                                  
		接口层
TCP连接与断开
	三次握手  client->send状态,发送syn请求连接
			  server收到syn请求,发送syn+ack,进入recv状态
			  client收到syn+ack,发送ack,进入establistened
			  server收到ack,进入establistened
	四次挥手
			  client发送fin请求断开连接,表示我不会再给你发数据了进入FIN_WAIT1
			  server收到fin请求,返回ack给client,表示我还有数据要发送,client进入FIN_WAIT2状态,server进入close_wait
			  server发送fin给client,告诉它我没有数据要发送了,server进入last_wait
			  client返回ack给server,进入TIME_WAIT,server收到ack进入closed,client等待Nms后进入closed
TCP粘包
	是指接收数据时数据包是相连的,没多大意义,因为应用层自己实现协议一定会判断数据包长度和标记位
服务器结构
		  Login: 线程1,连接线程,管理与Client的连接,端口唯一
		  		 线程2,管理与Server的连接,Billing(时间计费)、World()		        
		         线程C,管理与DB的连接,
		         线程D,
		         线程E,主线程,守护子线程