服务器
	状态同步:CS模式,基于一问一答以及推送状态的方式,逻辑都在服务器端,安全性高
			 网络要求不高,重连速度快,因为不需要从初始状态开始一帧一帧的执行
			 服务器利用AOI来减少同步消息量
			 不够精确,打击感不强
	帧同步:  所有人都是从一个相同的初始状态开始,一帧一帧的执行
			 使用帧同步适用于人数较少的游戏,适用于单机,逻辑在客户端
			 网络要求高,反外挂比较弱,断线重连较长
			 注意点:浮点数、写逻辑不能有我这个概念,类似于服务器、随机数种子一致
	服务器      
	          高可用性  一个机器故障,访问请求会转到另一台机器
			  高伸缩性  选择压力较小的一台机器访问,访问失败就失败了
	          入口层:   nginx+keepalived	负载均衡,双机热备 实现高可用性,就是两台nginx代理服务器,通过keepalived实现主从故障转移,keepalived使得两台机器虚拟IP是一样的
						dns多配置几个IP     实现高伸缩性,就是通过配置N个IP来缓解服务器压力
						前台外网服务,心跳
			  业务层:   只有无状态的情况下才能实现高可用和高伸缩,因为没有状态,所以请求失败可以转到另外的一台
						有状态的情况下使用TCP连接,宕机后连接已失效,客户端自动重连,nginx转到另一台有效的服务器
						nginx+keepalived	高可用
						dns多配置几个IP	    高伸缩
			  缓存层:   减小缓存粒度
			  数据库:   mysql支持主从复制,如何配置不太清楚			 
				  
	UML类图  每个类由  类型 属性 方法构成
					   -后面是属性:类型
					   +后面是方法(参数):返回值
			 类关系包括 实现继承  三角+实线,指向基类
						接口继承  三角+虚线,指向接口
						依赖	  箭头+虚线,指向被依赖类
						关联	  箭头+实线,互相依赖
						聚合	  菱形+实线,指向聚合类,可有可无
						组合      实心菱形+实线,指向组合类,必须存在
						
						总结: 三角表示继承,关系强是实线,弱就是虚线
							  菱形表示组合,实心表示强包含,必须存在
							  箭头表示依赖,		
    UML时序图 	对象 : 时序图中交互的类对象
				生命 : 垂直向下,代表对象生命周期
				焦点 : 矩形块,表示时间段,所有对象从上到下水平上时间一致
				消息 : 分为同步和异步,同步消息实心三角,异步消息箭头,返回消息为虚线
							  
客户端
	热更新   shader 		代码中不能使用Shader.Find来创建shader,因为Find操作是查找build时构建的一个hashmap, 包括Resources、场景、AB
							shader编译后的cache在材质球内	
			 lua&bytes      安卓手机分为armv7 x86都是32位,ios 5s及以后都是64位,字节码加密可以打乱字节顺序,游戏资源也可以利用这种办法加密
							加密的目的是为了增加反编译的难度,完全避免不可能
			 c#             开启il2cpp,生成的安装包都是C代码,这个没办法热更
	安卓     armeabi        32位CPU
		     armeabi-v7a    32位CPU
			 arm64-v8a      64位CPU,两种执行状态aarch64 aarch32















































