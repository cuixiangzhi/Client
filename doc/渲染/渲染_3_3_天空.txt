天空盒
    原理
        实时渲染中非常远的物体,大小几乎不会随着摄像机的移动而变化
        天空盒是一个由六个面的纹理构成的一个立方体即CubeMap,上下左右前后分别对应一张纹理
        摄像机始终处于立方体中心
        生成一个与远平面大小相同的MESH,渲染这个MESH时根据中心点指向顶点的向量计算出与CudeMap的交点,取出纹理像素值
        纹理映射
            1.给出一个3D向量[x,y,z]，首先找出值最大的那一维。以[-3.2, 5.1, -8.4]为例子， 这时最大维为Z，最大维用来把cube map从六张图定位到一张图上。-8.4为负数，对应了立方体的负Z面，因此接下来我们关注的焦点将是立方体负Z面对应的那张纹理
            2.把向量中另外两维分别除以最大维，得到一个二维向量，(3.2/8.4, -5.1/8.4)。很容易知道，这个二维向量中的数值范围位于[-1, 1]之间
            3.把上阶段中得到的二维向量转换到[0, 1]之间。很简单，把位于[-1, 1]之间的数转换到[0, 1]之间的方法为: (x + 1) / 2。对于上面的例子， 为3.2/8.4 * 2 + 0.5 = 0.31, -5.1 / 8.4 * 2 + 0.5 = 0.51。因此得到二维向量(0.31, 0.51)。这个二维向量就是我们用来在负Z轴上获得texel的纹理坐标
            第一步:根据最大维确定纹理图
            第二步:其它两个维度除以最大维度,缩放到[-1,1]
            第三步:把纹理坐标映射到[0,1]之内
    实现
        o.pos = mul(UNITY_MATRIX_MVP,v.vertex);
        o.pos.z = o.pos.w 让顶点始终处于远平面
        o.texcoord = o.pos.xyz
        color = texCUBE(_SKYTEX,o.texcoord)
    消隐
        由于摄像机在物体内部,模型法线与摄像机朝向夹角点乘结果大于0,glCull会剔除掉它,所以需要关闭glCull Off或者glCull Front
    模型
        模型大小根据摄像机FOV和近远裁剪面距离计算出远平面
    纹理
        纹理大小需要与模型大小匹配,否则会出现拉伸, textureSize = (ScreenWidth)/tan(fov/2)

