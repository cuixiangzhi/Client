//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameCore_UtilTimerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UtilTimer");
		L.RegFunction("Init", Init);
		L.RegFunction("LateLoop", LateLoop);
		L.RegFunction("Exit", Exit);
		L.RegFunction("AddTimer", AddTimer);
		L.RegFunction("DeleteTimer", DeleteTimer);
		L.RegFunction("PauseTimer", PauseTimer);
		L.RegFunction("TimerCallBack", GameCore_UtilTimer_TimerCallBack);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameCore.UtilTimer.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateLoop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameCore.UtilTimer.LateLoop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameCore.UtilTimer.Exit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameCore.UtilTimer.TimerCallBack arg2 = (GameCore.UtilTimer.TimerCallBack)ToLua.CheckDelegate<GameCore.UtilTimer.TimerCallBack>(L, 3);
			int o = GameCore.UtilTimer.AddTimer(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<GameCore.UtilTimer.TimerCallBack>(L, 1))
			{
				GameCore.UtilTimer.TimerCallBack arg0 = (GameCore.UtilTimer.TimerCallBack)ToLua.ToObject(L, 1);
				GameCore.UtilTimer.DeleteTimer(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				GameCore.UtilTimer.DeleteTimer(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCore.UtilTimer.DeleteTimer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<GameCore.UtilTimer.TimerCallBack, bool>(L, 1))
			{
				GameCore.UtilTimer.TimerCallBack arg0 = (GameCore.UtilTimer.TimerCallBack)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				GameCore.UtilTimer.PauseTimer(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, bool>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				GameCore.UtilTimer.PauseTimer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCore.UtilTimer.PauseTimer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GameCore_UtilTimer_TimerCallBack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GameCore.UtilTimer.TimerCallBack>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GameCore.UtilTimer.TimerCallBack>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

