//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Collections.Generic;
using LuaInterface;

public class DelegateFactory
{
	public delegate Delegate DelegateCreate(LuaFunction func, LuaTable self, bool flag);
	public static Dictionary<Type, DelegateCreate> dict = new Dictionary<Type, DelegateCreate>();
	static DelegateFactory factory = new DelegateFactory();

	public static void Init()
	{
		Register();
	}

	public static void Register()
	{
		dict.Clear();
		dict.Add(typeof(System.Action<string,LuaInterface.LuaByteBuffer>), factory.System_Action_string_LuaInterface_LuaByteBuffer);
		dict.Add(typeof(System.Action<string,UnityEngine.Object>), factory.System_Action_string_UnityEngine_Object);
		dict.Add(typeof(UnityEngine.Camera.CameraCallback), factory.UnityEngine_Camera_CameraCallback);
		dict.Add(typeof(System.Predicate<LuaValueInfo>), factory.System_Predicate_LuaValueInfo);
		dict.Add(typeof(System.Action<LuaValueInfo>), factory.System_Action_LuaValueInfo);
		dict.Add(typeof(System.Comparison<LuaValueInfo>), factory.System_Comparison_LuaValueInfo);

		DelegateTraits<System.Action<string,LuaInterface.LuaByteBuffer>>.Init(factory.System_Action_string_LuaInterface_LuaByteBuffer);
		DelegateTraits<System.Action<string,UnityEngine.Object>>.Init(factory.System_Action_string_UnityEngine_Object);
		DelegateTraits<UnityEngine.Camera.CameraCallback>.Init(factory.UnityEngine_Camera_CameraCallback);
		DelegateTraits<System.Predicate<LuaValueInfo>>.Init(factory.System_Predicate_LuaValueInfo);
		DelegateTraits<System.Action<LuaValueInfo>>.Init(factory.System_Action_LuaValueInfo);
		DelegateTraits<System.Comparison<LuaValueInfo>>.Init(factory.System_Comparison_LuaValueInfo);

		TypeTraits<System.Action<string,LuaInterface.LuaByteBuffer>>.Init(factory.Check_System_Action_string_LuaInterface_LuaByteBuffer);
		TypeTraits<System.Action<string,UnityEngine.Object>>.Init(factory.Check_System_Action_string_UnityEngine_Object);
		TypeTraits<UnityEngine.Camera.CameraCallback>.Init(factory.Check_UnityEngine_Camera_CameraCallback);
		TypeTraits<System.Predicate<LuaValueInfo>>.Init(factory.Check_System_Predicate_LuaValueInfo);
		TypeTraits<System.Action<LuaValueInfo>>.Init(factory.Check_System_Action_LuaValueInfo);
		TypeTraits<System.Comparison<LuaValueInfo>>.Init(factory.Check_System_Comparison_LuaValueInfo);

		StackTraits<System.Action<string,LuaInterface.LuaByteBuffer>>.Push = factory.Push_System_Action_string_LuaInterface_LuaByteBuffer;
		StackTraits<System.Action<string,UnityEngine.Object>>.Push = factory.Push_System_Action_string_UnityEngine_Object;
		StackTraits<UnityEngine.Camera.CameraCallback>.Push = factory.Push_UnityEngine_Camera_CameraCallback;
		StackTraits<System.Predicate<LuaValueInfo>>.Push = factory.Push_System_Predicate_LuaValueInfo;
		StackTraits<System.Action<LuaValueInfo>>.Push = factory.Push_System_Action_LuaValueInfo;
		StackTraits<System.Comparison<LuaValueInfo>>.Push = factory.Push_System_Comparison_LuaValueInfo;
	}
    
    public static Delegate CreateDelegate(Type t, LuaFunction func = null)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));            
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func);
            
            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }  
            else
            {
                Delegate d = Create(func, null, false);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func);
                return d;
            }       
        }

        return Create(null, null, false);        
    }
    
    public static Delegate CreateDelegate(Type t, LuaFunction func, LuaTable self)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func, self);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, self, true);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func, self);
                return d;
            }
        }

        return Create(null, null, true);
    }
    
    public static Delegate RemoveDelegate(Delegate obj, LuaFunction func)
    {
        LuaState state = func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld.func == func)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                break;
            }
        }

        return obj;
    }
    
    public static Delegate RemoveDelegate(Delegate obj, Delegate dg)
    {
        LuaDelegate remove = dg.Target as LuaDelegate;

        if (remove == null)
        {
            obj = Delegate.Remove(obj, dg);
            return obj;
        }

        LuaState state = remove.func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();        

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld == remove)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                state.DelayDispose(ld.self);
                break;
            }
        }

        return obj;
    }

	class System_Action_string_LuaInterface_LuaByteBuffer_Event : LuaDelegate
	{
		public System_Action_string_LuaInterface_LuaByteBuffer_Event(LuaFunction func) : base(func) { }
		public System_Action_string_LuaInterface_LuaByteBuffer_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, LuaInterface.LuaByteBuffer param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, LuaInterface.LuaByteBuffer param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<string,LuaInterface.LuaByteBuffer> System_Action_string_LuaInterface_LuaByteBuffer(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string,LuaInterface.LuaByteBuffer> fn = delegate(string param0, LuaInterface.LuaByteBuffer param1) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_LuaInterface_LuaByteBuffer_Event target = new System_Action_string_LuaInterface_LuaByteBuffer_Event(func);
			System.Action<string,LuaInterface.LuaByteBuffer> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_LuaInterface_LuaByteBuffer_Event target = new System_Action_string_LuaInterface_LuaByteBuffer_Event(func, self);
			System.Action<string,LuaInterface.LuaByteBuffer> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_string_LuaInterface_LuaByteBuffer(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<string,LuaInterface.LuaByteBuffer>), L, pos);
	}

	void Push_System_Action_string_LuaInterface_LuaByteBuffer(IntPtr L, System.Action<string,LuaInterface.LuaByteBuffer> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_string_UnityEngine_Object_Event : LuaDelegate
	{
		public System_Action_string_UnityEngine_Object_Event(LuaFunction func) : base(func) { }
		public System_Action_string_UnityEngine_Object_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, UnityEngine.Object param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, UnityEngine.Object param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<string,UnityEngine.Object> System_Action_string_UnityEngine_Object(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string,UnityEngine.Object> fn = delegate(string param0, UnityEngine.Object param1) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_UnityEngine_Object_Event target = new System_Action_string_UnityEngine_Object_Event(func);
			System.Action<string,UnityEngine.Object> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_UnityEngine_Object_Event target = new System_Action_string_UnityEngine_Object_Event(func, self);
			System.Action<string,UnityEngine.Object> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_string_UnityEngine_Object(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<string,UnityEngine.Object>), L, pos);
	}

	void Push_System_Action_string_UnityEngine_Object(IntPtr L, System.Action<string,UnityEngine.Object> o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Camera_CameraCallback_Event : LuaDelegate
	{
		public UnityEngine_Camera_CameraCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Camera_CameraCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Camera param0)
		{
			func.BeginPCall();
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.Camera param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Camera.CameraCallback UnityEngine_Camera_CameraCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Camera.CameraCallback fn = delegate(UnityEngine.Camera param0) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func);
			UnityEngine.Camera.CameraCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func, self);
			UnityEngine.Camera.CameraCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Camera_CameraCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Camera.CameraCallback), L, pos);
	}

	void Push_UnityEngine_Camera_CameraCallback(IntPtr L, UnityEngine.Camera.CameraCallback o)
	{
		ToLua.Push(L, o);
	}

	class System_Predicate_LuaValueInfo_Event : LuaDelegate
	{
		public System_Predicate_LuaValueInfo_Event(LuaFunction func) : base(func) { }
		public System_Predicate_LuaValueInfo_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(LuaValueInfo param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}

		public bool CallWithSelf(LuaValueInfo param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}
	}

	public System.Predicate<LuaValueInfo> System_Predicate_LuaValueInfo(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<LuaValueInfo> fn = delegate(LuaValueInfo param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_LuaValueInfo_Event target = new System_Predicate_LuaValueInfo_Event(func);
			System.Predicate<LuaValueInfo> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_LuaValueInfo_Event target = new System_Predicate_LuaValueInfo_Event(func, self);
			System.Predicate<LuaValueInfo> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Predicate_LuaValueInfo(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Predicate<LuaValueInfo>), L, pos);
	}

	void Push_System_Predicate_LuaValueInfo(IntPtr L, System.Predicate<LuaValueInfo> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_LuaValueInfo_Event : LuaDelegate
	{
		public System_Action_LuaValueInfo_Event(LuaFunction func) : base(func) { }
		public System_Action_LuaValueInfo_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(LuaValueInfo param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(LuaValueInfo param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<LuaValueInfo> System_Action_LuaValueInfo(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<LuaValueInfo> fn = delegate(LuaValueInfo param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_LuaValueInfo_Event target = new System_Action_LuaValueInfo_Event(func);
			System.Action<LuaValueInfo> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_LuaValueInfo_Event target = new System_Action_LuaValueInfo_Event(func, self);
			System.Action<LuaValueInfo> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_LuaValueInfo(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<LuaValueInfo>), L, pos);
	}

	void Push_System_Action_LuaValueInfo(IntPtr L, System.Action<LuaValueInfo> o)
	{
		ToLua.Push(L, o);
	}

	class System_Comparison_LuaValueInfo_Event : LuaDelegate
	{
		public System_Comparison_LuaValueInfo_Event(LuaFunction func) : base(func) { }
		public System_Comparison_LuaValueInfo_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(LuaValueInfo param0, LuaValueInfo param1)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(LuaValueInfo param0, LuaValueInfo param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public System.Comparison<LuaValueInfo> System_Comparison_LuaValueInfo(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<LuaValueInfo> fn = delegate(LuaValueInfo param0, LuaValueInfo param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_LuaValueInfo_Event target = new System_Comparison_LuaValueInfo_Event(func);
			System.Comparison<LuaValueInfo> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_LuaValueInfo_Event target = new System_Comparison_LuaValueInfo_Event(func, self);
			System.Comparison<LuaValueInfo> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Comparison_LuaValueInfo(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Comparison<LuaValueInfo>), L, pos);
	}

	void Push_System_Comparison_LuaValueInfo(IntPtr L, System.Comparison<LuaValueInfo> o)
	{
		ToLua.Push(L, o);
	}

}

